{"paragraphs":[{"text":"%md\n## Welcome to BDTwitrend.\n#### This is the class project of Big Data Technology course, you can run the code yourself. (Shift-Enter to Run)\n##### Batjargal Bayarsaikhan (Alex) - 986264\n##### March 14-19 2018","user":"anonymous","dateUpdated":"2018-03-19T21:19:03-0500","config":{"colWidth":12,"enabled":false,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Welcome to BDTwitrend.</h2>\n<h4>This is the class project of Big Data Technology course, you can run the code yourself. (Shift-Enter to Run)</h4>\n<h5>Batjargal Bayarsaikhan (Alex) - 986264</h5>\n<h5>March 14-19 2018</h5>\n</div>"}]},"apps":[],"jobName":"paragraph_1521168859685_-851216986","id":"20180315-215419_1197411295","dateCreated":"2018-03-15T21:54:19-0500","dateStarted":"2018-03-18T14:28:01-0500","dateFinished":"2018-03-18T14:28:28-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:258"},{"title":"1. Real-Time Dashboard","text":"%angular\n<style>\n.axis {\n\tfont-family: sans-serif;\n\tfill: #d35400;\n\tfont-size: 12px;\n}\n.line {\n\tfill: none;\n\tstroke: #f1c40f;\n\tstroke-width: 3px;\n}\n.smoothLine {\n\tfill: none;\n\tstroke: #e74c3c;\n\tstroke-width: 3px;\n}\n.area {\n\tfill: #e74c3c;\n\topacity: 0.5;\n}\n.circle {\n\tstroke: #e74c3c;\n\tstroke-width: 3px;\n\tfill: #FFF;\n}\n.grid {\n\tstroke: #DDD;\n\tstroke-width: 1px;\n\tfill: none;\n}\n#lastTweets p {\n    margin: 0;\n}\n</style>\n\n<div style=\"float:left;\">\n<h3 style=\"margin-top:0\">Number of Tweets by received date</h3><br/>\n<svg id=\"realtimechart\"  width=\"960\" height=\"300\" ></svg>\n</div>\n<div style=\"float:left; \">\n<h3 style=\"margin-top:0\">Number of Tweets/Users</h3><br/>\n<div style=\"font-size:40px; height: 250px;line-height: 250px;text-align: center;border: 0px dashed #f69c55; margin:0px; paddin:30px\">\n<span id=\"countTweets\" style=\"color:#8A2BE2; font-weight:bold;\">0</span> / \n<span id=\"countUsers\" style=\"color:#008000; font-weight:bold;\">0</span>\n</div>\n</div>\n<div style=\"clear:both; width:100%\"> </div>\n<br/>\n<h3 style=\"margin-top:0\">Latest 10 tweets</h3>\n<div id=\"lastTweets\">\n    \n</div>\n<br/>\n<br/>\n<script>\n\n</script>\n\n\n<script>\nvar countTweets = 0;\nvar countUsers = 0;\nfunction useD3() {\n\n\n   \nvar data = [\n];\nvar globalX = 0;\nvar duration = 500;\nvar max = 500;\nvar step = 10;\n\nvar spanCountTweets = $(\"#countTweets\");\nvar spanCountUsers = $(\"#countUsers\");\n\nvar chart = d3.select('#realtimechart');\nvar margin = {top: 20, right: 20, bottom: 30, left: 50};\nvar width = +chart.attr(\"width\") - margin.left - margin.right;\nvar height = +chart.attr(\"height\") - margin.top - margin.bottom;\n    \nvar g = chart.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nvar divLatestTweets = angular.element( document.querySelector( '#lastTweets' ) )\nvar chartHashTags = d3.select('#lastTweets')\n.attr('width', width - margin.left - margin.right)\n.attr('height', height  - margin.top - margin.bottom);\n\nvar x = d3.scale.linear().domain([0, 500]).rangeRound([0, width]);\nvar y = d3.scale.linear().domain([0, 40]).rangeRound([height, 0]);\n// -----------------------------------\n//for grids\nvar line = d3.svg.line()\n\t\t\t\t\t.x(function(d){ return x(d.x); })\n\t\t\t\t\t.y(function(d){ return y(d.y); });\n\t\t\t\t\t\n//for drawing realtime line chart\t\t\t\t\t\nvar smoothLine = d3.svg.line().interpolate('cardinal')\n\t\t\t\t\t.x(function(d){ return x(d.x); })\n\t\t\t\t\t.y(function(d){ return y(d.y); });\n// -----------------------------------\n// Draw the axis\nvar xAxis = d3.svg.axis().scale(x).orient('bottom');\nvar axisX = g.append(\"g\").attr('class', 'x axis')\n\t\t\t .attr('transform', \"translate(0, \" + height + \")\")\n\t\t\t .call(xAxis);\n\t\t\t\t\t\n\n// Draw the grid\ng.append(\"path\").datum([{x: 0, y: 6}, {x: 500, y: 6}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 0, y: 20}, {x: 500, y: 20}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 0, y: 34}, {x: 500, y: 34}]).attr('class', 'grid').attr('d', line);\n\ng.append(\"path\").datum([{x: 100, y: 0 }, {x: 100, y: 38}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 250, y: 0}, {x: 250, y: 38}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 450, y: 0}, {x: 450, y: 38}]).attr('class', 'grid').attr('d', line);\n\n// Append the holder for line chart and fill area\nvar path = g.append(\"path\")\n      .attr(\"fill\", \"none\")\n\t  //.attr('transform', \"translate(50, \" + height + \")\")\n      .attr(\"stroke\", \"steelblue\");\n      //.attr(\"stroke-width\", 1.5)\n      //.attr(\"d\", line);\n\n      \nvar yAxis = d3.svg.axis().scale(y).orient('left');\n      //.text(\"Numbers\");\nvar axisY = g.append(\"g\").attr('class', 'y axis')\n\t\t\t .call(yAxis)\n        \n    var el = angular.element($('#realtimechart').parent().parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        console.log(el.scope().compiledScope);\n        window.locationWatcher = el.scope().compiledScope.$watchCollection('DataBag', function(dataBag, oldValue){\n        \n            if(dataBag ){\n                console.log(dataBag);\n                \n                    //Users\n                    countUsers = countUsers + dataBag.users.length;\n                    spanCountUsers.text(countUsers);\n                    \n                \t// Items by Date\n                \tvar itemsByDate = dataBag.itemsByDate;\n                \t\n                    \n                    itemsByDate.forEach(function(dt) {\n                        \n                           countTweets = countTweets + dt.tweets;\n                            spanCountTweets.text(countTweets);\n                    \n                        \tvar point = {\n                        \t    x: globalX,\n                        \t    y: dt.tweets\n                        \t};\n                        \tdata.push(point);\n                        \tglobalX += step;\n                        \t// Draw new line\n                         \tpath.datum(data)\n                         \t\t.attr('class', 'smoothline')\n                         \t\t.attr('d', smoothLine);\n                        \t\n                        \t\n                        \tx.domain([globalX - (max - step), globalX]);\n                        \t\n                        \taxisX.transition()\n                        \t\t .duration(duration)\n                        \t\t .ease('linear')\n                        \t\t .call(xAxis);\n                        \tpath.attr('transform', null)\n                        \t\t.transition()\n                        \t\t.duration(duration)\n                        \t\t.ease('linear')\n                        \t\t.attr('transform', 'translate(' + x(globalX - max) + ')')\n                        \t\t//.each('end', tick)\n                        \t\n                        \t// Remote old data (max 50 points)\n                        \tif (data.length > 50) data.shift();\n                    });\n                    \n                    //LatestTweets\n                \t// Items by Date\n                \tvar latestTweet = dataBag.lastTweets;\n                    \n                    //divLatestTweets.[0].innerHTML=\"\";\n                    latestTweet.forEach(function(item){\n                    \n                        \n                        var para = document.createElement(\"p\");\n                        var node = document.createTextNode(item.tweet);\n                        para.appendChild(node);\n                        \n                        divLatestTweets.prepend(para);\n                        \n                        if ($(divLatestTweets).find(\"p\").length > 10)\n                            $(divLatestTweets).find(\"p:last\").remove();\n                    });\n                    \n            }\n        });\n    });\n    \n\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\n//https://cdnjs.cloudflare.com/ajax/libs/d3/4.10.2/d3.min.js   //d3js.org/d3.v4.min.js\nif (window.d3) {\n    useD3();\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://d3js.org/d3.v3.min.js';\n    sc.onload = useD3;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n","user":"anonymous","dateUpdated":"2018-03-20T07:04:56-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n.axis {\n\tfont-family: sans-serif;\n\tfill: #d35400;\n\tfont-size: 12px;\n}\n.line {\n\tfill: none;\n\tstroke: #f1c40f;\n\tstroke-width: 3px;\n}\n.smoothLine {\n\tfill: none;\n\tstroke: #e74c3c;\n\tstroke-width: 3px;\n}\n.area {\n\tfill: #e74c3c;\n\topacity: 0.5;\n}\n.circle {\n\tstroke: #e74c3c;\n\tstroke-width: 3px;\n\tfill: #FFF;\n}\n.grid {\n\tstroke: #DDD;\n\tstroke-width: 1px;\n\tfill: none;\n}\n#lastTweets p {\n    margin: 0;\n}\n</style>\n\n<div style=\"float:left;\">\n<h3 style=\"margin-top:0\">Number of Tweets by received date</h3><br/>\n<svg id=\"realtimechart\"  width=\"960\" height=\"300\" ></svg>\n</div>\n<div style=\"float:left; \">\n<h3 style=\"margin-top:0\">Number of Tweets/Users</h3><br/>\n<div style=\"font-size:40px; height: 250px;line-height: 250px;text-align: center;border: 0px dashed #f69c55; margin:0px; paddin:30px\">\n<span id=\"countTweets\" style=\"color:#8A2BE2; font-weight:bold;\">0</span> / \n<span id=\"countUsers\" style=\"color:#008000; font-weight:bold;\">0</span>\n</div>\n</div>\n<div style=\"clear:both; width:100%\"> </div>\n<br/>\n<h3 style=\"margin-top:0\">Latest 10 tweets</h3>\n<div id=\"lastTweets\">\n    \n</div>\n<br/>\n<br/>\n<script>\n\n</script>\n\n\n<script>\nvar countTweets = 0;\nvar countUsers = 0;\nfunction useD3() {\n\n\n   \nvar data = [\n];\nvar globalX = 0;\nvar duration = 500;\nvar max = 500;\nvar step = 10;\n\nvar spanCountTweets = $(\"#countTweets\");\nvar spanCountUsers = $(\"#countUsers\");\n\nvar chart = d3.select('#realtimechart');\nvar margin = {top: 20, right: 20, bottom: 30, left: 50};\nvar width = +chart.attr(\"width\") - margin.left - margin.right;\nvar height = +chart.attr(\"height\") - margin.top - margin.bottom;\n    \nvar g = chart.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nvar divLatestTweets = angular.element( document.querySelector( '#lastTweets' ) )\nvar chartHashTags = d3.select('#lastTweets')\n.attr('width', width - margin.left - margin.right)\n.attr('height', height  - margin.top - margin.bottom);\n\nvar x = d3.scale.linear().domain([0, 500]).rangeRound([0, width]);\nvar y = d3.scale.linear().domain([0, 40]).rangeRound([height, 0]);\n// -----------------------------------\n//for grids\nvar line = d3.svg.line()\n\t\t\t\t\t.x(function(d){ return x(d.x); })\n\t\t\t\t\t.y(function(d){ return y(d.y); });\n\t\t\t\t\t\n//for drawing realtime line chart\t\t\t\t\t\nvar smoothLine = d3.svg.line().interpolate('cardinal')\n\t\t\t\t\t.x(function(d){ return x(d.x); })\n\t\t\t\t\t.y(function(d){ return y(d.y); });\n// -----------------------------------\n// Draw the axis\nvar xAxis = d3.svg.axis().scale(x).orient('bottom');\nvar axisX = g.append(\"g\").attr('class', 'x axis')\n\t\t\t .attr('transform', \"translate(0, \" + height + \")\")\n\t\t\t .call(xAxis);\n\t\t\t\t\t\n\n// Draw the grid\ng.append(\"path\").datum([{x: 0, y: 6}, {x: 500, y: 6}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 0, y: 20}, {x: 500, y: 20}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 0, y: 34}, {x: 500, y: 34}]).attr('class', 'grid').attr('d', line);\n\ng.append(\"path\").datum([{x: 100, y: 0 }, {x: 100, y: 38}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 250, y: 0}, {x: 250, y: 38}]).attr('class', 'grid').attr('d', line);\ng.append(\"path\").datum([{x: 450, y: 0}, {x: 450, y: 38}]).attr('class', 'grid').attr('d', line);\n\n// Append the holder for line chart and fill area\nvar path = g.append(\"path\")\n      .attr(\"fill\", \"none\")\n\t  //.attr('transform', \"translate(50, \" + height + \")\")\n      .attr(\"stroke\", \"steelblue\");\n      //.attr(\"stroke-width\", 1.5)\n      //.attr(\"d\", line);\n\n      \nvar yAxis = d3.svg.axis().scale(y).orient('left');\n      //.text(\"Numbers\");\nvar axisY = g.append(\"g\").attr('class', 'y axis')\n\t\t\t .call(yAxis)\n        \n    var el = angular.element($('#realtimechart').parent().parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        console.log(el.scope().compiledScope);\n        window.locationWatcher = el.scope().compiledScope.$watchCollection('DataBag', function(dataBag, oldValue){\n        \n            if(dataBag ){\n                console.log(dataBag);\n                \n                    //Users\n                    countUsers = countUsers + dataBag.users.length;\n                    spanCountUsers.text(countUsers);\n                    \n                \t// Items by Date\n                \tvar itemsByDate = dataBag.itemsByDate;\n                \t\n                    \n                    itemsByDate.forEach(function(dt) {\n                        \n                           countTweets = countTweets + dt.tweets;\n                            spanCountTweets.text(countTweets);\n                    \n                        \tvar point = {\n                        \t    x: globalX,\n                        \t    y: dt.tweets\n                        \t};\n                        \tdata.push(point);\n                        \tglobalX += step;\n                        \t// Draw new line\n                         \tpath.datum(data)\n                         \t\t.attr('class', 'smoothline')\n                         \t\t.attr('d', smoothLine);\n                        \t\n                        \t\n                        \tx.domain([globalX - (max - step), globalX]);\n                        \t\n                        \taxisX.transition()\n                        \t\t .duration(duration)\n                        \t\t .ease('linear')\n                        \t\t .call(xAxis);\n                        \tpath.attr('transform', null)\n                        \t\t.transition()\n                        \t\t.duration(duration)\n                        \t\t.ease('linear')\n                        \t\t.attr('transform', 'translate(' + x(globalX - max) + ')')\n                        \t\t//.each('end', tick)\n                        \t\n                        \t// Remote old data (max 50 points)\n                        \tif (data.length > 50) data.shift();\n                    });\n                    \n                    //LatestTweets\n                \t// Items by Date\n                \tvar latestTweet = dataBag.lastTweets;\n                    \n                    //divLatestTweets.[0].innerHTML=\"\";\n                    latestTweet.forEach(function(item){\n                    \n                        \n                        var para = document.createElement(\"p\");\n                        var node = document.createTextNode(item.tweet);\n                        para.appendChild(node);\n                        \n                        divLatestTweets.prepend(para);\n                        \n                        if ($(divLatestTweets).find(\"p\").length > 10)\n                            $(divLatestTweets).find(\"p:last\").remove();\n                    });\n                    \n            }\n        });\n    });\n    \n\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\n//https://cdnjs.cloudflare.com/ajax/libs/d3/4.10.2/d3.min.js   //d3js.org/d3.v4.min.js\nif (window.d3) {\n    useD3();\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://d3js.org/d3.v3.min.js';\n    sc.onload = useD3;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}"}]},"apps":[],"jobName":"paragraph_1521486624678_-2063554151","id":"20180319-141024_867824164","dateCreated":"2018-03-19T14:10:24-0500","dateStarted":"2018-03-19T22:57:25-0500","dateFinished":"2018-03-19T22:57:25-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:259"},{"title":"2. Kafka Consumer for real-time dashboard","text":"%spark \nimport org.apache.kafka.clients.consumer.ConsumerRecord\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010.KafkaUtils\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\nimport org.apache.spark.streaming._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.SparkSession\nimport org.apache.zeppelin.display.angular.notebookscope._\nimport org.apache.spark.SparkConf\nimport AngularElem._\nimport org.apache.spark.streaming.{Seconds, StreamingContext, Time}\nimport java.nio.file.Files\n\n\nsc.setLogLevel(\"ERROR\")\n\n\ncase class Orders(status: String, count: Int)\ncase class TweetItem(user: String, tweet: String, date: String)\n\ncase class TweetItemByUser(user: String, date: String, tweets: Int)\ncase class TweetItemByDate(date: String, tweets: Int)\n\ncase class HashTags(hashTag: String, count: Int)\n\ncase class User(user: String, count:Int)\n\ncase class DataBag( itemsByDate: Array[TweetItemByDate], lastTweets: Array[TweetItem], hashTags: Array[TweetItem], users:Array[User] )\n\n/** Lazily instantiated singleton instance of SparkSession */\nobject SparkSessionSingleton {\n\n  @transient  private var instance: SparkSession = _\n\n  def getInstance(sparkConf: SparkConf): SparkSession = {\n    if (instance == null) {\n      instance = SparkSession\n        .builder\n        .config(sparkConf)\n        .getOrCreate()\n    }\n    instance\n  }\n}\n\n\n/*\nval checkpointPath = Files.createTempDirectory(\"query\")\nval checkpointDir = checkpointPath.toFile\n\ncheckpointDir.deleteOnExit()\n\ndef deleteRecursively(file: java.io.File): Unit = {\n  if (file.isDirectory) {\n    file.listFiles().foreach(deleteRecursively)\n    file.delete()\n  }\n  else\n    file.delete()\n}\n\ndef clearCheckpointDir: Unit = {\n  checkpointDir.listFiles().foreach(deleteRecursively)\n}*/\n\n    \n//spark.conf.set(\"spark.sql.streaming.checkpointLocation\", checkpointDir.getAbsolutePath)\nval ssc = new StreamingContext(sc, Seconds(1))\n//ssc.checkpoint(checkpointDir.getAbsolutePath)\nval kafkaParams = Map(\n    \"bootstrap.servers\" -> \"localhost:9092\",\n    \"key.deserializer\" -> classOf[StringDeserializer],\n  \"value.deserializer\" -> classOf[StringDeserializer],\n  \"group.id\" -> \"use_a_separate_group_id_for_each_stream\",\n  \"auto.offset.reset\" -> \"latest\",\n  \"enable.auto.commit\" -> (false: java.lang.Boolean)\n)\n\nval topics = Array(\"topic-bdtwitrend\")\nval messages = KafkaUtils.createDirectStream[String, String](\n    ssc,\n    PreferConsistent,\n    Subscribe[String, String](topics, kafkaParams)\n)\n\n//val dmr = \"º¿\"\nval dmr = \"¿\"\n\n//val hastags = datas(0)\n//val text = datas(1)\n//val latitude = datas(2)\n//val longitude = datas(3)\n//val createdAt = datas(4)\n//val user = datas(5)\n//val receivedAt = datas(6)\n\nval lines = messages.map(_.value)\n\nlines.foreachRDD{ \n    (rdd: RDD[String], time: Time) => {\n        val dmr = \"¿\"\n        \n      var dfItemByDate = rdd.map(x=>x.split(dmr)(6).substring(11, 16))\n                            .map(x => (x, 1)).reduceByKey(_ + _)\n                            .map{case (x: String, tweets: Int) => TweetItemByDate(x, tweets)}\n      \n      var dfLastTweets = rdd.map{case (x: String) => TweetItem(x.split(dmr)(5), x.split(dmr)(1),  x.split(dmr)(6))}\n      \n      var dfUsers = rdd.map(x=>x.split(dmr)(5))\n                            .map(x => (x, 1)).reduceByKey(_ + _)\n                            .map{case (x: String, count: Int) => User(x, count)}\n     \n     \n      \n      val spark = SparkSessionSingleton.getInstance(rdd.sparkContext.getConf)\n      import spark.implicits._\n\n      // Convert RDD[String] to RDD[case class] to DataFrame\n      val tweetItemsDf = dfLastTweets.toDF()\n\n      // Creates a temporary view using the DataFrame\n      //tweetItemsDf.createOrReplaceTempView(\"TweetItems\")\n\n      // count on table using SQL and print it\n      //val countTweetItems =\n      //spark.sql(\"select NumberOfUsers, NumberOfTweets, (NumberOfTweets-NumberOfUsers) as Diff, substr(Created, 12, 8) as created, substr(created, 0, 18)  from (select count(user) as NumberOfUsers, sum(tweet) as NumberOfTweets, min(created) as created from (select user, count(tweet) as tweet, min(date_format(date, 'yyyy-MM-dd HH:mm:ss')) as created from TweetItems group by user) group by substr(created, 0, 18)  order by created desc limit 30) order by created\")\n      println(s\"========= $time =========\")\n      //countTweetItems.show()\n      \n      \n      \n      var dataBag = DataBag(dfItemByDate.collect, dfLastTweets.collect,  dfLastTweets.collect, dfUsers.collect)\n      //z.angularBind(\"TweetItemsByDate\", ordrs)\n      z.angularBind(\"DataBag\", dataBag)\n    }\n}\n\n sys.ShutdownHookThread {\n      println(\"Gracefully stopping Spark Streaming Application\")\n      ssc.stop(false, true)\n      println(\"Application stopped\")\n  }\n\nssc.start()\nssc.awaitTerminationOrTimeout(20000)\n","user":"anonymous","dateUpdated":"2018-03-20T07:06:30-0500","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":464.5,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.kafka.clients.consumer.ConsumerRecord\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010.KafkaUtils\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\nimport org.apache.spark.streaming._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.SparkSession\nimport org.apache.zeppelin.display.angular.notebookscope._\nimport org.apache.spark.SparkConf\nimport AngularElem._\nimport org.apache.spark.streaming.{Seconds, StreamingContext, Time}\nimport java.nio.file.Files\ndefined class Orders\ndefined class TweetItem\ndefined class TweetItemByUser\ndefined class TweetItemByDate\ndefined class HashTags\ndefined class User\ndefined class DataBag\ndefined object SparkSessionSingleton\nssc: org.apache.spark.streaming.StreamingContext = org.apache.spark.streaming.StreamingContext@615831bb\nkafkaParams: scala.collection.immutable.Map[String,java.io.Serializable] = Map(key.deserializer -> class org.apache.kafka.common.serialization.StringDeserializer, auto.offset.reset -> latest, group.id -> use_a_separate_group_id_for_each_stream, bootstrap.servers -> localhost:9092, enable.auto.commit -> false, value.deserializer -> class org.apache.kafka.common.serialization.StringDeserializer)\ntopics: Array[String] = Array(topic-bdtwitrend)\nmessages: org.apache.spark.streaming.dstream.InputDStream[org.apache.kafka.clients.consumer.ConsumerRecord[String,String]] = org.apache.spark.streaming.kafka010.DirectKafkaInputDStream@3333fce1\ndmr: String = ¿\nlines: org.apache.spark.streaming.dstream.DStream[String] = org.apache.spark.streaming.dstream.MappedDStream@13a1b75f\nres108: scala.sys.ShutdownHookThread = Thread[shutdownHook1,5,main]\n========= 1521547061000 ms =========\n========= 1521547062000 ms =========\n========= 1521547063000 ms =========\n========= 1521547064000 ms =========\n========= 1521547065000 ms =========\n========= 1521547066000 ms =========\n========= 1521547067000 ms =========\n========= 1521547068000 ms =========\n========= 1521547069000 ms =========\n========= 1521547070000 ms =========\n========= 1521547071000 ms =========\n========= 1521547072000 ms =========\n========= 1521547073000 ms =========\n========= 1521547074000 ms =========\n========= 1521547075000 ms =========\n========= 1521547076000 ms =========\n========= 1521547077000 ms =========\n========= 1521547078000 ms =========\n========= 1521547079000 ms =========\n========= 1521547080000 ms =========\n========= 1521547081000 ms =========\nres111: Boolean = false\n"}]},"apps":[],"jobName":"paragraph_1521428377613_-1831978299","id":"20180318-215937_637097329","dateCreated":"2018-03-18T21:59:37-0500","dateStarted":"2018-03-20T06:57:22-0500","dateFinished":"2018-03-20T06:58:01-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:260"},{"title":"3. Stop stream","text":"%spark\nssc.stop(false, true)","user":"anonymous","dateUpdated":"2018-03-20T07:16:37-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1521429041596_-1368238215","id":"20180318-221041_150860591","dateCreated":"2018-03-18T22:10:41-0500","dateStarted":"2018-03-20T07:16:37-0500","dateFinished":"2018-03-20T07:16:38-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:261"},{"title":"4. Load data into table (Spark/HBase/DataFrames)","text":"%spark\n\nimport org.apache.spark.sql.execution.datasources.hbase._\nimport org.apache.spark.sql._\n\ndef catalogTweet = s\"\"\"{\n  |\"table\":{\"namespace\":\"default\", \"name\":\"tblTweet\"},\n  |\"rowkey\":\"key\",\n  |\"columns\":{\n    |\"key\":{\"cf\":\"rowkey\", \"col\":\"key\", \"type\":\"string\"},\n    |\"tweet\":{\"cf\":\"Tweet\", \"col\":\"Text\", \"type\":\"string\"},\n    |\"hashtags\":{\"cf\":\"Tweet\", \"col\":\"Hashtags\", \"type\":\"string\"},\n    |\"created\":{\"cf\":\"Tweet\", \"col\":\"Created\", \"type\":\"string\"},\n    |\"user\":{\"cf\":\"Tweet\", \"col\":\"User\", \"type\":\"string\"},\n    |\"receivedAt\":{\"cf\":\"Tweet\", \"col\":\"ReceivedAt\", \"type\":\"string\"},\n    |\"latitude\":{\"cf\":\"Geo\", \"col\":\"Latitude\", \"type\":\"string\"},\n    |\"longitude\":{\"cf\":\"Geo\", \"col\":\"Longitude\", \"type\":\"string\"}\n  |}\n|}\"\"\".stripMargin\n\n\ndef catalogHashTag = s\"\"\"{\n  |\"table\":{\"namespace\":\"default\", \"name\":\"tblHashTag\"},\n  |\"rowkey\":\"key\",\n  |\"columns\":{\n    |\"key\":{\"cf\":\"rowkey\", \"col\":\"key\", \"type\":\"string\"},\n    |\"hashtag\":{\"cf\":\"Info\", \"col\":\"HashTag\", \"type\":\"string\"},\n    |\"created\":{\"cf\":\"Info\", \"col\":\"Created\", \"type\":\"string\"},\n    |\"receivedAt\":{\"cf\":\"Info\", \"col\":\"ReceivedAt\", \"type\":\"string\"}\n  |}\n|}\"\"\".stripMargin\n\ndef withCatalog(cat: String): DataFrame = {\n  sqlContext\n  .read\n  .options(Map(HBaseTableCatalog.tableCatalog->cat))\n  .format(\"org.apache.spark.sql.execution.datasources.hbase\")\n  .load()\n}\n\nval dfTweet = withCatalog(catalogTweet)\nval dfHashTag = withCatalog(catalogHashTag)\n\nval tblTweet =  dfTweet.select(\"key\", \"tweet\", \"hashtags\", \"created\", \"user\", \"latitude\", \"longitude\", \"receivedAt\")\nval tblHashTag =  dfHashTag.select(\"key\", \"hashtag\", \"created\", \"receivedAt\")\n\ntblTweet.registerTempTable(\"tblTweet\")\ntblHashTag.registerTempTable(\"tblHashTag\")\n\n//sqlContext.sql(\"select count(col0) from tblTweetHashTag\").show\n\n    ","user":"anonymous","dateUpdated":"2018-03-20T06:48:49-0500","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":94.35,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.execution.datasources.hbase._\nimport org.apache.spark.sql._\ncatalogTweet: String\ncatalogHashTag: String\nwithCatalog: (cat: String)org.apache.spark.sql.DataFrame\ndfTweet: org.apache.spark.sql.DataFrame = [key: string, tweet: string ... 6 more fields]\ndfHashTag: org.apache.spark.sql.DataFrame = [key: string, hashtag: string ... 2 more fields]\ntblTweet: org.apache.spark.sql.DataFrame = [key: string, tweet: string ... 6 more fields]\ntblHashTag: org.apache.spark.sql.DataFrame = [key: string, hashtag: string ... 2 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1521173966188_1155987074","id":"20180315-231926_1177327453","dateCreated":"2018-03-15T23:19:26-0500","dateStarted":"2018-03-20T06:48:49-0500","dateFinished":"2018-03-20T06:50:12-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:262"},{"title":"Number of Tweets and Users","text":"%sql\nselect NumberOfUsers, NumberOfTweets, (NumberOfTweets-NumberOfUsers) as Diff, substr(Created, 12, 8) as created, substr(created, 0, 18)  from (select count(user) as NumberOfUsers, sum(tweet) as NumberOfTweets, min(created) as created from (select user, count(tweet) as tweet, min(date_format(receivedAt, \"yyyy-MM-dd HH:mm:ss\")) as created from tblTweet group by user) group by substr(created, 0, 18)  order by created desc limit 30) order by created","user":"anonymous","dateUpdated":"2018-03-20T06:51:28-0500","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"setting":{"lineChart":{"forceY":false,"lineWithFocus":false},"pieChart":{},"scatterChart":{"size":{"name":"Diff","index":2,"aggr":"sum"},"yAxis":{"name":"NumberOfTweets","index":1,"aggr":"sum"},"group":{"name":"Created","index":3,"aggr":"sum"},"xAxis":{"name":"Created","index":3,"aggr":"sum"}},"stackedAreaChart":{"style":"stack"},"multiBarChart":{}},"keys":[{"name":"created","index":3,"aggr":"sum"}],"groups":[],"values":[{"name":"NumberOfTweets","index":1,"aggr":"sum"},{"name":"NumberOfUsers","index":0,"aggr":"sum"},{"name":"Diff","index":2,"aggr":"sum"}],"commonSetting":{}},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"NumberOfUsers\tNumberOfTweets\tDiff\tcreated\tsubstring(created, 0, 18)\n93\t95\t2\t06:46:00\t2018-03-20 06:46:0\n86\t92\t6\t06:46:10\t2018-03-20 06:46:1\n97\t100\t3\t06:46:20\t2018-03-20 06:46:2\n108\t115\t7\t06:46:30\t2018-03-20 06:46:3\n102\t107\t5\t06:46:40\t2018-03-20 06:46:4\n88\t89\t1\t06:46:50\t2018-03-20 06:46:5\n82\t87\t5\t06:47:00\t2018-03-20 06:47:0\n87\t91\t4\t06:47:10\t2018-03-20 06:47:1\n90\t92\t2\t06:47:20\t2018-03-20 06:47:2\n82\t84\t2\t06:47:30\t2018-03-20 06:47:3\n102\t102\t0\t06:47:40\t2018-03-20 06:47:4\n87\t88\t1\t06:47:50\t2018-03-20 06:47:5\n103\t111\t8\t06:48:00\t2018-03-20 06:48:0\n51\t52\t1\t06:48:10\t2018-03-20 06:48:1\n125\t126\t1\t06:48:20\t2018-03-20 06:48:2\n110\t112\t2\t06:48:30\t2018-03-20 06:48:3\n98\t99\t1\t06:48:40\t2018-03-20 06:48:4\n82\t82\t0\t06:48:50\t2018-03-20 06:48:5\n114\t117\t3\t06:49:00\t2018-03-20 06:49:0\n86\t88\t2\t06:49:10\t2018-03-20 06:49:1\n101\t103\t2\t06:49:20\t2018-03-20 06:49:2\n88\t89\t1\t06:49:30\t2018-03-20 06:49:3\n90\t91\t1\t06:49:40\t2018-03-20 06:49:4\n87\t87\t0\t06:49:50\t2018-03-20 06:49:5\n101\t102\t1\t06:50:00\t2018-03-20 06:50:0\n117\t119\t2\t06:50:10\t2018-03-20 06:50:1\n94\t94\t0\t06:50:20\t2018-03-20 06:50:2\n109\t109\t0\t06:50:30\t2018-03-20 06:50:3\n97\t97\t0\t06:50:40\t2018-03-20 06:50:4\n28\t28\t0\t06:50:50\t2018-03-20 06:50:5\n"}]},"apps":[],"jobName":"paragraph_1521393587445_-470192351","id":"20180318-121947_1321492582","dateCreated":"2018-03-18T12:19:47-0500","dateStarted":"2018-03-20T06:50:42-0500","dateFinished":"2018-03-20T06:51:19-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:263"},{"title":"Top 10 topics","text":"%sql\n\nselect hashtag, count(hashtag) as total from tblHashTag group by hashtag order by total desc limit 10","user":"anonymous","dateUpdated":"2018-03-20T06:52:10-0500","config":{"colWidth":6,"enabled":true,"results":{"0":{"graph":{"mode":"pieChart","height":286,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","editorHide":true,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"hashtag\ttotal\nKCA\t35\nMaineRemarkableAt23\t30\nMarchMadness\t25\nNowPlaying\t24\nNationalBreakfastDay\t21\nEXO\t20\nGOT7\t16\n엑소\t16\nMUTSeason\t14\nFavMusicalGroupTwentyOnePilots\t11\n"}]},"apps":[],"jobName":"paragraph_1521335710222_2119324792","id":"20180317-201510_1241575138","dateCreated":"2018-03-17T20:15:10-0500","dateStarted":"2018-03-20T06:52:05-0500","dateFinished":"2018-03-20T06:52:07-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:264"},{"title":"Top 10 topics","text":"%sql\nselect HashTag, count(hashtag) as total from tblHashTag group by hashtag order by total desc limit 10","user":"anonymous","dateUpdated":"2018-03-20T06:50:49-0500","config":{"colWidth":6,"enabled":false,"results":{"0":{"graph":{"mode":"table","height":304.5,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"HashTag\ttotal\nBreakSilenceOnAfrin\t50\nKCA\t50\nBBNaija\t20\nEXO\t18\nGioXJoanneOnASAPSummerTrip\t17\nStPatricksDay\t16\nFavMusicalGroupTwentyOnePilots\t14\n엑소\t13\nNowPlaying\t13\nMarchMadness\t12\n"}]},"apps":[],"jobName":"paragraph_1521335706434_621882073","id":"20180317-201506_2123282838","dateCreated":"2018-03-17T20:15:06-0500","dateStarted":"2018-03-18T15:15:40-0500","dateFinished":"2018-03-18T15:15:41-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:265"},{"title":"Most active 10 users","text":"%sql\nselect User, count(user) as NumberOfTweets from tblTweet group by user order by NumberOfTweets desc limit 10\n","user":"anonymous","dateUpdated":"2018-03-20T06:52:25-0500","config":{"colWidth":4,"enabled":true,"results":{"0":{"graph":{"mode":"pieChart","height":351.5,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"User\tNumberOfTweets\n.\t12\nً\t9\nalex\t5\nJ\t4\nMohammad Waqar Butt\t4\nN\t4\n...\t4\n🦋\t4\nLex\t4\n🦄\t4\n"}]},"apps":[],"jobName":"paragraph_1521337847889_-1105975452","id":"20180317-205047_1671066571","dateCreated":"2018-03-17T20:50:47-0500","dateStarted":"2018-03-19T16:30:03-0500","dateFinished":"2018-03-19T16:30:06-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:266"},{"title":"Most active 10 users","text":"%sql\nselect User, count(tweet) as NumberOfTweets from tblTweet group by user order by NumberOfTweets desc limit 10","user":"anonymous","dateUpdated":"2018-03-19T21:10:32-0500","config":{"colWidth":4,"enabled":false,"results":{"0":{"graph":{"mode":"multiBarChart","height":308,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","editorHide":false,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"User\tNumberOfTweets\n.\t10\nً\t8\nLex\t4\nalex\t4\n🦋\t4\nJ\t4\nN\t4\n...\t4\nDavid\t4\nJack\t3\n"}]},"apps":[],"jobName":"paragraph_1521338205539_-1629869349","id":"20180317-205645_2090973195","dateCreated":"2018-03-17T20:56:45-0500","dateStarted":"2018-03-18T18:37:00-0500","dateFinished":"2018-03-18T18:37:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:267"},{"title":"Last 10 users","text":"%sql\nselect distinct User, date_format(receivedAt, \"yyyy-MM-dd HH:mm:ss\") as Created from tblTweet order by Created desc  limit 10","user":"anonymous","dateUpdated":"2018-03-19T21:10:42-0500","config":{"colWidth":4,"enabled":false,"results":{"0":{"graph":{"mode":"table","height":353.5,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false},"stackedAreaChart":{}},"commonSetting":{},"keys":[],"groups":[],"values":[]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"User\tCreated\n#BoycottFamilyLaw\t2018-03-18 15:37:04\nAgudiez88@gmail.com\t2018-03-18 15:37:04\n411 Wrestling\t2018-03-18 15:37:03\ni can do both\t2018-03-18 15:37:03\nETG\t2018-03-18 15:37:03\nmelissa\t2018-03-18 15:37:03\nLera\t2018-03-18 15:37:03\nKaliber\t2018-03-18 15:37:03\nBlueSide\t2018-03-18 15:37:03\nalthea not athena\t2018-03-18 15:37:03\n"}]},"apps":[],"jobName":"paragraph_1521338314680_-1062243772","id":"20180317-205834_857188744","dateCreated":"2018-03-17T20:58:34-0500","dateStarted":"2018-03-18T15:39:40-0500","dateFinished":"2018-03-18T15:39:41-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:268"},{"title":"Last 10 tweets","text":"%sql\nselect   regexp_replace(tweet, '[^a-zA-Z0-9 !,@#$%^&*\\(\\)\\-\\+\\\\:;\\'/<>\\?]+', \"\") as Tweet, User, date_format(receivedAt, \"yyyy-MM-dd HH:mm:ss\") as Created from tblTweet order by created desc limit 10\n","user":"anonymous","dateUpdated":"2018-03-19T21:10:51-0500","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","title":true,"tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Tweet\tUser\tCreated\nRT @montherrat: im telling yall mexican kids are a different type of breed https://tco/7I2R0aI3W6\trodrigo bastos\t2018-03-18 18:37:56\n@sousaposamigos amt baby\tsimões\t2018-03-18 18:37:56\nRT @tonywithawhy: ARTPOP in all its glory https://tco/CLzKNiJPYF\tJesús\t2018-03-18 18:37:56\nRT @WTA: This is probably going to be the worst acceptance speech of all time  @BNPPARIBASOPEN champion @NaomiOsakaWe beg to differ!\tnehir\t2018-03-18 18:37:56\nRT @snailburast: OH MY FUCKING GODWhat a time to be a Dragon Ball fan Episode 130 was UNREAL https://tco/td6Pu97Q5G\tTarranium\t2018-03-18 18:37:56\nContrary to popular belief There are very few idols I'd fuck Most of them just cute\tFirst Lady M'baku\t2018-03-18 18:37:56\nswimming pool nude sex position woman https://tco/12AKkuj0d0\tAndrea Cox\t2018-03-18 18:37:56\nRT @axwaclawski: His own snoring woke him up and I cannot stop laughing https://tco/wBV4rELESw\tA\t2018-03-18 18:37:55\nRT @xtyeTWOtimes: nah wait this sound kinda lit https://tco/Yn1lJdcwU9\tDestiny\t2018-03-18 18:37:55\nKENNY KING IS ON THE BACHELOR, IM SCREAMING\tkri 🔮\t2018-03-18 18:37:55\n"}]},"apps":[],"jobName":"paragraph_1521342481083_-175716903","id":"20180317-220801_1791096802","dateCreated":"2018-03-17T22:08:01-0500","dateStarted":"2018-03-19T16:30:16-0500","dateFinished":"2018-03-19T16:30:18-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:269"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2018-03-19T16:30:16-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521495016817_-384605248","id":"20180319-163016_932335657","dateCreated":"2018-03-19T16:30:16-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:270"}],"name":"BDTwitrend","id":"2DBDF3FF5","angularObjects":{"2DANCNB5W:shared_process":[],"2DASSW9U5:shared_process":[],"2D7UT1Q6X:shared_process":[],"2D7YBHWUX:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false","cronExecutingUser":""},"info":{}}